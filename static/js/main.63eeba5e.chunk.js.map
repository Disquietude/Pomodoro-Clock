{"version":3,"sources":["js/components/Clock.js","js/components/Settings.js","js/components/App.js","serviceWorker.js","index.js","sounds/alarm.mp3"],"names":["convertTime","time","seconds","minutes","toString","length","Clock","props","firstButton","completionPercent","sessionActive","currentTime","sessionEndTime","react_default","a","createElement","className","currentSession","style","height","border","background","width","transition","onClick","e","Settings","type","min","value","workLength","onChange","breakLength","onCheck","defaultChecked","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","audioClip","React","createRef","state","autoStartSessions","muteAudio","handleChange","bind","assertThisInitialized","handleClick","handleCheck","propName","event","setState","defineProperty","target","reset","button","_this2","setInterval","tick","clearInterval","setting","newSetting","nextSession","nextSessionEndTime","_this3","prevState","current","play","setTimeout","pause","Fragment","src","alarm","ref","components_Clock","components_Settings","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.63eeba5e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst convertTime = (time) => {\r\n  let seconds = time % 60;\r\n  let minutes = (time-seconds)/60;\r\n  seconds = seconds.toString();\r\n  if (seconds.length === 1) {\r\n    seconds = \"0\" + seconds;\r\n  }\r\n  return minutes + \":\" + seconds;\r\n}\r\n\r\nconst Clock = (props) => {\r\n  let firstButton, completionPercent;\r\n  //logic to allow first button to switch between Start and Pause\r\n  if (!props.sessionActive) {\r\n    firstButton = \"Start\";\r\n  } else {\r\n    firstButton = \"Pause\";\r\n  }\r\n  //logic to set length of progress bar\r\n  completionPercent = 100*(props.currentTime/props.sessionEndTime) + \"%\";\r\n\r\n  return (\r\n    <div className=\"card clock\">\r\n      <h3> {props.currentSession} </h3>\r\n      <div style={{height: 10, border: \"solid\"}}>\r\n        <div style={{\r\n            background:\"black\",\r\n            height: 5,\r\n            width: completionPercent,\r\n            transition: \"width 1s linear\"\r\n          }}></div>\r\n      </div>\r\n      <div>\r\n        {convertTime(props.currentTime)} / {convertTime(props.sessionEndTime)}\r\n      </div>\r\n      <div className=\"clock__controls\">\r\n        <button \r\n          onClick={(e) => props.onClick(firstButton, e)} \r\n          className=\"btn btn-primary\"\r\n        > \r\n          {firstButton} \r\n        </button>\r\n        <button \r\n          onClick={(e) => props.onClick(\"Reset\", e)} \r\n          className=\"btn btn-danger\"\r\n        > \r\n          Reset \r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Clock;","import React from 'react';\r\n\r\nconst Settings = (props) => (\r\n  <div className=\"card settings\">\r\n    <h5>Settings</h5>\r\n    <div>\r\n      <div className=\"settings__durations\">\r\n        <span>Work Length:</span>\r\n        <input \r\n          className=\"settings__number-input\" \r\n          type=\"number\" \r\n          min=\"1\" \r\n          value={props.workLength} \r\n          onChange={(e) => props.onChange(\"workLength\", e)}\r\n        />\r\n        <span>minutes</span> \r\n\r\n        <span>Break Length:</span>\r\n        <input \r\n          className=\"settings__number-input\" \r\n          type=\"number\" \r\n          min=\"1\" \r\n          value={props.breakLength} \r\n          onChange={(e) => props.onChange(\"breakLength\", e)}\r\n        />\r\n        <span>minutes</span>\r\n\r\n      </div>\r\n\r\n      <div className=\"form-check\">\r\n        <input \r\n          className=\"form-check-input\" \r\n          type=\"checkbox\" \r\n          onChange={(e) => props.onCheck(\"auto\", e)} \r\n          defaultChecked\r\n        />       \r\n        <label className=\"form-check-label\">Automatically start sessions</label>\r\n      </div>\r\n      <div className=\"form-check\">\r\n        <input\r\n          className=\"form-check-input\" \r\n          type=\"checkbox\" \r\n          onChange={(e) => props.onCheck(\"mute\", e)}\r\n        /> \r\n        <label className=\"form-check-label\">Mute alarm</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Settings;","import React, { Component } from 'react';\r\nimport Clock from './Clock';\r\nimport Settings from './Settings';\r\n\r\nimport alarm from '../../sounds/alarm.mp3';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.timer = null; //field used to store the time interval set up when Start is clicked\r\n    this.audioClip = React.createRef();\r\n    this.state = {\r\n      workLength: 25, //in minutes\r\n      breakLength: 5, //in minutes\r\n      currentTime: 0, //in seconds\r\n      sessionEndTime: 1500, //in seconds\r\n      currentSession: \"Work\",\r\n      sessionActive: false,\r\n      autoStartSessions: true,\r\n      muteAudio: false\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleCheck = this.handleCheck.bind(this);\r\n  }\r\n  \r\n  //method to update the workLength and breakLength\r\n  handleChange(propName, event) {\r\n    this.setState({[propName]: event.target.value});\r\n    this.reset();\r\n    if ((this.state.currentSession === \"Work\"  && propName === \"workLength\") ||\r\n        (this.state.currentSession === \"Break\" && propName === \"breakLength\")) {\r\n      this.setState({sessionEndTime: 60*event.target.value});\r\n    }\r\n  }\r\n  \r\n  handleClick(button) {\r\n    if (button === \"Start\") {\r\n      this.setState({sessionActive: true});\r\n      this.timer = setInterval(() => this.tick(), 1000);\r\n    }\r\n    else if (button === \"Pause\") {\r\n      this.setState({sessionActive: false});\r\n      clearInterval(this.timer);\r\n    }\r\n    else if (button === \"Reset\") {\r\n      this.reset();\r\n    }\r\n  }\r\n  \r\n  //method to handle checkbox settings\r\n  handleCheck(setting) {\r\n    let newSetting;\r\n    if (setting === \"auto\") {\r\n      newSetting = !this.state.autoStartSessions;\r\n      this.setState({autoStartSessions: newSetting});\r\n    }\r\n    else if (setting === \"mute\") {\r\n      newSetting = !this.state.muteAudio;\r\n      this.setState({muteAudio: newSetting});\r\n    }\r\n  }\r\n  \r\n  //method to update state every second (only when there is an active session)\r\n  tick() {\r\n    if (this.state.currentTime < this.state.sessionEndTime) {\r\n      this.setState(prevState => ({currentTime: prevState.currentTime + 1}));\r\n    }\r\n    //when time runs out in a session\r\n    else {\r\n      let nextSession, nextSessionEndTime;\r\n      if (this.state.currentSession === \"Work\") {\r\n        nextSession = \"Break\";\r\n        nextSessionEndTime = 60*this.state.breakLength;\r\n      }\r\n      else {\r\n        nextSession = \"Work\";\r\n        nextSessionEndTime = 60*this.state.workLength;\r\n      }\r\n      this.setState({\r\n        currentTime: 0,\r\n        currentSession: nextSession,\r\n        sessionEndTime: nextSessionEndTime\r\n      });\r\n      \r\n      //play alarm sound if audio is not muted\r\n      if (!this.state.muteAudio) {\r\n        this.audioClip.current.currentTime = 0;\r\n        this.audioClip.current.play();\r\n        setTimeout(() => this.audioClip.current.pause(), 1000);\r\n      }\r\n      \r\n      //clear the timer if autoStartSessions is false\r\n      if (!this.state.autoStartSessions) {\r\n        this.reset();\r\n      }\r\n    }\r\n  }\r\n  \r\n  //method to reset the clock (invoked when Reset is clicked or when settings are changed)\r\n  reset() {\r\n    this.setState({\r\n      sessionActive: false,\r\n      currentTime : 0\r\n    });\r\n    clearInterval(this.timer);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"card title\">\r\n          <h1> Pomodoro Clock </h1>\r\n        </div>\r\n        <audio src={alarm} ref={this.audioClip}/>\r\n        <Clock \r\n          currentSession={this.state.currentSession} \r\n          currentTime={this.state.currentTime}\r\n          sessionEndTime={this.state.sessionEndTime}\r\n          sessionActive={this.state.sessionActive}\r\n          onClick={this.handleClick}\r\n        />\r\n        <Settings \r\n          workLength={this.state.workLength} \r\n          breakLength={this.state.breakLength}\r\n          onChange={this.handleChange}\r\n          onCheck={this.handleCheck}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/styles.sass';\nimport App from './js/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/alarm.61eb5a40.mp3\";"],"sourceRoot":""}